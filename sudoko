import pygame
import random
import copy

# Initialize Pygame
pygame.init()

# Screen settings
WIDTH, HEIGHT = 540, 600  # 540x540 grid + 60px for buttons/info
SCREEN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Sudoku 9x9")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)
RED = (255, 0, 0)
BLUE = (0, 0, 255)

# Game settings
GRID_SIZE = 9
CELL_SIZE = WIDTH // GRID_SIZE
FONT = pygame.font.SysFont("Arial", 40)
SMALL_FONT = pygame.font.SysFont("Arial", 20)

# Sudoku solver and generator
def is_valid(board, row, col, num):
    # Check row
    for x in range(GRID_SIZE):
        if board[row][x] == num:
            return False
    # Check column
    for x in range(GRID_SIZE):
        if board[x][col] == num:
            return False
    # Check 3x3 box
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False
    return True

def solve_sudoku(board):
    for row in range(GRID_SIZE):
        for col in range(GRID_SIZE):
            if board[row][col] == 0:
                for num in range(1, 10):
                    if is_valid(board, row, col, num):
                        board[row][col] = num
                        if solve_sudoku(board):
                            return True
                        board[row][col] = 0
                return False
    return True

def generate_board():
    # Start with an empty board
    board = [[0 for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]
    # Fill some cells to ensure a unique solution
    for _ in range(17):  # Minimum clues for a unique 9x9 Sudoku
        row, col = random.randint(0, 8), random.randint(0, 8)
        num = random.randint(1, 9)
        while not is_valid(board, row, col, num) or board[row][col] != 0:
            row, col = random.randint(0, 8), random.randint(0, 8)
            num = random.randint(1, 9)
        board[row][col] = num
    # Solve it to ensure itâ€™s valid
    solve_sudoku(board)
    # Remove cells to create the puzzle
    solution = copy.deepcopy(board)
    for _ in range(40):  # Remove 40 cells for medium difficulty
        row, col = random.randint(0, 8), random.randint(0, 8)
        while board[row][col] == 0:
            row, col = random.randint(0, 8), random.randint(0, 8)
        board[row][col] = 0
    return board, solution

# Game variables
board, solution = generate_board()
original_board = copy.deepcopy(board)  # Keep track of immutable cells
selected = None  # (row, col) of selected cell

def draw_grid():
    SCREEN.fill(WHITE)
    # Draw grid lines
    for i in range(GRID_SIZE + 1):
        thickness = 3 if i % 3 == 0 else 1
        pygame.draw.line(SCREEN, BLACK, (i * CELL_SIZE, 0), (i * CELL_SIZE, WIDTH), thickness)
        pygame.draw.line(SCREEN, BLACK, (0, i * CELL_SIZE), (WIDTH, i * CELL_SIZE), thickness)
    
    # Draw numbers
    for row in range(GRID_SIZE):
        for col in range(GRID_SIZE):
            if board[row][col] != 0:
                color = BLACK if original_board[row][col] != 0 else BLUE
                num_text = FONT.render(str(board[row][col]), True, color)
                SCREEN.blit(num_text, (col * CELL_SIZE + 15, row * CELL_SIZE + 10))
    
    # Highlight selected cell
    if selected:
        pygame.draw.rect(SCREEN, GRAY, (selected[1] * CELL_SIZE, selected[0] * CELL_SIZE, CELL_SIZE, CELL_SIZE), 0)
    
    # Draw buttons/info
    solve_text = SMALL_FONT.render("Press 'S' to Solve", True, BLACK)
    reset_text = SMALL_FONT.render("Press 'R' to Reset", True, BLACK)
    SCREEN.blit(solve_text, (10, WIDTH + 10))
    SCREEN.blit(reset_text, (200, WIDTH + 10))

def main():
    global board, selected, solution
    clock = pygame.time.Clock()
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                x, y = event.pos
                if y < WIDTH:  # Click within grid
                    row, col = y // CELL_SIZE, x // CELL_SIZE
                    if original_board[row][col] == 0:  # Only select editable cells
                        selected = (row, col)
                    else:
                        selected = None
            elif event.type == pygame.KEYDOWN:
                if selected and event.key in [pygame.K_1, pygame.K_2, pygame.K_3, pygame.K_4, 
                                              pygame.K_5, pygame.K_6, pygame.K_7, pygame.K_8, pygame.K_9]:
                    num = int(pygame.key.name(event.key))
                    if is_valid(board, selected[0], selected[1], num):
                        board[selected[0]][selected[1]] = num
                elif event.key == pygame.K_s:  # Solve
                    board = copy.deepcopy(solution)
                elif event.key == pygame.K_r:  # Reset
                    board = copy.deepcopy(original_board)
                    selected = None
                elif event.key == pygame.K_DELETE or event.key == pygame.K_BACKSPACE:
                    if selected and original_board[selected[0]][selected[1]] == 0:
                        board[selected[0]][selected[1]] = 0

        # Draw everything
        draw_grid()
        pygame.display.flip()
        clock.tick(60)

    pygame.quit()

if __name__ == "__main__":
    main()
